Μανωλάς Σταμάτιος 1115201400094 Προγραμματισμός Συστήματος Εργασία 1η

Γενικά:

	Έχω ακολουθήσει τις οδηγίες της εκφώνησης και είδα και όποιες διορθώσεις υπήρχαν στο φόρουμ. Το πρόγραμμα τρέχει
όπως αναφέρεται στην εκφώνηση ακριβώς με τα ίδια ορίσματα αλλά τα δέχεται σε οποιαδήποτε σειρά. Έχουν αρχικές τιμές
οπότε όποιο και να λείψει εκτός από το όνομα του αρχείου των ονομάτων/μπιτκοινς, η εκτέλεση θα γίνει κανονικά. Ελέγχω
το μέγεθος του κουβά κι αν είναι κάτω από 46(μετράω την ελάχιστη τιμή και ειδοποιώ το χρήστη, στον υπολογιστή μου ήταν 46)
το δωσμένο, παίρνει τη αρχική τιμή του 50. Γενικά το πρόγραμμα θα σταματήσει την εκτέλεση από κάποιο έρρορ, τα απλά 
πράγματα ελέγχονται. Έχω υλοποιήσει όλες τις δομές και όσο δοκίμασα δουλεύουν κανονικά. Από εντολές δεν έχω ολοκληρώσει τη
requestTransactions μόνο. Το πρόγραμμα αποδευσμεύει τη μνήμη κανονικά. Έχω προσπαθήσει να αποφύγω διπλότυπα δεδομένα όσον
αφορά τα αντικείμενα, μόνο κάποιες συμβολοσειρές αποθηκεύονται πάνω από 1 φορά. Το compilation γίνεται με την εντολή make,
και η make clean σβήνει τα .ο αρχεια και το εκτελέσιμο. Οι εντολές από το χρήστη κατά την εκτέλεση είναι ακριβώς ίδιες σε
ορθογραφία όπως στην εκφώνηση και στο φόρουμ. Το πρόγραμμα εχει γραφτεί σε C++. Επίσης, στις δομές προσπάθησα να ακολουθήσω
λογική του μαύρου κουτιού και να είναι αυτόνομες. Γενικά έχω τρέξει τίς δομές αρκετά με valgrind και μου βγάζει ένα error
μόνο όταν τρέχω την requestTransaction, αλλά δουλεύει κανονικά η εντολή. Όλοι οι δομές εκτός από τα hashTableς και κάποια
tempς είναι δυναμικοί. Έτρεξα το πρόγραμμα στο λινουξ09 της σχολής και έτρεχε εντάξει.

Ανάπτυξη Κώδικα

main.cpp:
	Ελέγχονται όλα τα όρισματα, και ενημερώνει το χρήστη αν δεν το αναγνωρίζει. Έπειτα ελέγχονται το μεγεθος του κουβά και
αν έχει βρεθεί το αρχείο των ονομάτων/μπιτκοινς. Αφού ανοιχτεί το αρχείο μπαίνουν τα ονόματα και τα μπιτκοινς στις δομές.
Μετά εκτελεί τις συναλλαγές από το αρχείο(αν υπάρχει) και έπειτα αναμένει εντολή από το χρήστη. Πριν τη καταστορφή των δομών
εκτυπώνονται όλα τα δεδομένα τους.

wallet.cpp:
Το κάθε όνομα(​walletID) αποτελεί ένα αντικείμενο με τα στοιχεία του μέσα(ποια κ πόσα μπίτκοινς έχει,όνομα,αξία). Τα μπιτκονς
που έχει είναι σε δυναμικό πίνακα από δείκτες στο φύλλο του καθε δέντρου μετά από κάποια συναλλαγή. Στην αρχή έχει τη ρίζα
του δέντρου. Όλα τα ονόματα(αντικείμενα) είναι αποθηκευμένα σε ένα άλλο αντικείμενο που έχει ένα δυναμικό πίνακα από δείκτες
σε αυτά. Όταν γίνεται μία έγκυρη συναλλαγή η συνάρτηση getBCsValued επιστρέφει δείκτες από τα μπιτκοινς που διαθέτει ο χρήστης
σε πίνακα και μετά αν έχει υπόλοιπο του επιστρέται το δεξί φύλλο από το τελευταίο που είχε στείλει. 

bitcoin.cpp:
	Τα μπιτκοινς αποτελούνται από τρεις κλάσεις. Η πρώτη(bitcoin) περιέχει όλα τα δεδομένα ενός μπιτκοιν(ID,double αξία,δείκτη
στο πορτοφόλι που ανήκει).Αυτό αποτελεί αντικείμενο/δεδομένα στην εξωτερική του κλάση(bitcoinNode) που είναι φύλλο από δέντρο.
Η ρίζα κάθε δέντρου είναι bitcoinNode και αποθηκεύεται σε ένα δυναμικό πίνακα απο δείκτες στις ρίζες που έχει η εξωτερική
κλάση(bitcoins). Η bitcoinNode έχει δεδομένα δεικτες στους επομενους κόμβους, δείκτη σε συναλλαγή, αν συμμετείχε, και δείκτη
στα δεδομένα. Εδώ ο δείκτης σε συναλλαγή, δεν έιναι NULL μόνο στους αριστερούς κόμβους μετά από συναλλαγή. Αν αυτός που
έστειλε το μπίτκοιν, έστειλε και όλη την αξία του, δεν δημιουργείται δεξί φύλλο στο δέντρο του μπίτκοιν μετά την συναλλαγή.

transaction.cpp:
	Όταν γίνει έγκυρη μια συναλλαγή τότε δημιουργείται ένα αντικείμενο transactionData με τα δεδομένα της συναλλαγής(ID,αξία,
ημερομηνλια, ώρα, δείκτες στα πορτοφολια του παραλήπτη και του αποστολέα). Όλα τα transactionData αποθηκεύνται σε ένα δυναμικό
πίνακα της κλάσης transactions, η οποία κρατάει τη μεταγενέστερη ώρα σε συμβολοσειρές και σε ctime. H κλάση transactionNode 
χρησιμοποιείται μόνο στο πίνακα κατακερματισμού για να κρατάει σε κάθε record λίστα από συναλλαγές. Ως δεδομένα έχει δείκτη
στην ίδια τη συναλλαγή(transactionData) και στον επόμενο κόμβο.

hashTable.cpp:
	Η υλοποίση του πίνακα κατακερματισμού έγινε σύνφωνα με τις οδηγίες στο πιάτσα. Η γενική δομή ακολουθεί την εξής λογική:
Το ίδιο το hashTable έχει σταθερό μήκος και τα στοιχεία του αποτελούνται από ρίζα/κουβά μιας λίστας. Οι ρίζες των κουβάδων
αρχικοποιούνται μόνο αν πρόκειται να γίνει μια εγγραφή. Ο κάθε κουβας έχει σταθερό μεγεθος που δίνεται, και αν ξεπεραστεί τότε
μόνο δημιουργείται επόμενος κουβάς στην ίδια θέση. Ο κουβάς(bucketNode) αποτελείται από ένα ή παραπάνω records αναλόγως με το
μέγεθος του. Το κάθε record αποτελείται από συμβολοσειρά ενός ονόματος πορτοφολιού/κλειδιού και από τη ρίζα της λίστας των
συναλλαγών που συμμετείχε. Το hashTable χρησιμοποιεί τη get για να πάρει δείκτη στη ρίζα της λίστας συναλλαγών ενός
πορτοφολιού, και αν πάρει NULL, τότε δεν υπάρχει εγγραφή. Τότε καλείται η put για να γίνει μια εγγραφή στο πορτοφολι με το ID
και τη ρίζα των συναλλαγών. H hash function προσθέτει την ascii αξία των γραμμάτων από τη συμβολοσειρά του ονόματος ενός
πορτοφολιού και τοτε την κάνει mod με το μήκος του πίνακα και με έναν πρώτο αριθμό νωρίτερα, αν έιναι μικρότερος του μήκους.

validations.cpp:
	Αυτή η κλάση χαρακτιρίζεται από τις συναρτήσεις και όχι από τα δεδομένα της. Την έφτιαξα για να ελαφρύνω τη main, αλλά
κι επειδή μπορώ να κρατάω μέσα τις δομές και τις καλώ σε συναρτήσεις χωρίς να τις περνάω με ορίσματα συνέχεια. Τα ορίσματα
των εντολών ελέγχονται σε ένα βαθμό.

transactionsFromFile():
	Οι αρχικές συναλλαγές από το αρχείο γίνονται με αυτή τη συνάρτηση.

validTransaction():
	Ελέγχει την εγκυρότητα των δεδομένων μιας συναλλαγής. Πριν την αρχικοποίση του αντικειμένου συναλλαγής(transactionData).

makeTransaction():
	Αφότου έχει εγκριθεί μια συναλλαγή, αυτή η συνάρτηση καλεί άλλες συναρτήσεις για να δημιουργήσει και να γεμίσει τις δομές
με τα απαραίτητα δεδομένα. Εδώ δημιοργείται η συναλλαγή.

transactionMaster():
	Τυπώνει τα δεδομένα των χρηστών πριν και μετά τη συναλλαγή και είναι υπεύθυνη να ανανεώσει τις δομές των πορτοφολιών και 
των μπιτκοινς μετά τη συναλλαγή.
   
tracecoin():
	Καλεί μια ομωνυμη συνάρτηση από τη δομή των μπιτκοινς που εκτυπώνει την ιστορία συναλλαγών ενός μπιτκοιν.

bitCoinStatus():
	Τυπώνει bitcoinID	 	αριθμό των συναλλαγών στις οποίες έχει χρησιμοποιηθεί	unspent ποσό, καλώντας τις απαραίτητες
συναρτήσεις.

printWalletStatus():
	Τυπώνει το τρέχον ποσόν που είναι στο wallet.

findEarnings():
	Τυπώνει το συνολικό ποσόν που έχει λάβει μέσω συναλλαγών ο χρηστής με userID: walletID και μετά εκτυπώνει όλες τις 
εγγραφές συναλλαγών του χρήστη (ως παραλήπτης) που εκτελέστηκαν επιτυχώς μέσα στο διάστημα που δίνεται από τα ορίσματα.
Όσον αφορά την ώρα και την ημερομηνία, παίρνει το διάστημα ανάμεσα στα 2 ορίσματα. Δεν ελέγχω αν το 1ο όρισμα είναι 
προγενέστερο του πρώτου και αν είναι ορθά (πχ 35 μέρες), αλλά μπόρει να δεχτεί 2 ημερομηνίες, 2 ώρες, και τα δύο ή τίποτα
από τα δύο. Αν δε δινεται τιποτα τυπώνονται όλες οι συναλλαγές.
    
void findPayments():
	Λειτουργεί όπως ακριβώς η findEarnings() όμως για τον αποστολέα.
   
betweenTime1_2()
beforeAfterDate1_2():
	Χρησιμοποιήθηκαν στις παράπανω συναρτήσεις για να ελεγχουν αν ο χρόνος της συναλλαγής είναι ενδιάμεσα των ζητουμένων.

requestTransaction():
	Γίνεται έλεγχος όλων των ορισμάτων για το αν υπάρχουν στις δομές. Το id της συναλλαγής προέρχεται απο την ώρα και την 
ημερομηνία που γίνεται. Αν δεν υπάρχει κάποιο ή και κανένα από τα 2 ορίσματα χρόνου, χρησιμοποιείται η τωρινή ημερομηνία
και ώρα.  Το id της συναλλαγής είναι μοναδικό γιατί υπάρχει μόνο μία συναλλαγή για κάθε λεπτό του χρόνου.

requestTransactions():
	Ουστικά καλεί τη requestTransaction() για κάθε μία από τις συναλλαγές που μπήκαν ως είσοδος είτε από αρχείο είτε από τη
κονσόλα. 


